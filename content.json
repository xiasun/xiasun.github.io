{"meta":{"title":"Summer News","subtitle":"孙夏的博客 | Summer Sun's blog","description":null,"author":"Summer Sun","url":"http://yoursite.com"},"pages":[{"title":"About Me","date":"2017-08-22T07:25:09.506Z","updated":"2017-08-22T07:25:09.506Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hello I am Summer Sun living in Hangzhou China, my interests include scientific visualization (mainly medical volume data), medical image processing and data visualization. Recently I do C++ coding for most of my time with OpenCV, VTK and QT. I am know C, Python, MATLB, PHP, Java, JavaScript and NodeJS. 我是一名生活在杭州的程序猿，我目前主要做的方向有科学计算可视化（主要是医学体数据），医学图像处理和数据可视化。我最近的主要写C++（常用框架有OpenCV，VTK和QT），我对C，Python，MATLAB，PHP，Java，JavaScript，NodeJS也有所了解。"},{"title":"Categories","date":"2017-08-22T07:26:26.622Z","updated":"2017-08-22T07:26:26.622Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-08-22T07:26:33.550Z","updated":"2017-08-22T07:26:33.550Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"A Summary CBCT Segmentation Platform Version 1.0","slug":"teeth-seg-version-1-notes","date":"2017-08-21T01:07:40.000Z","updated":"2017-08-22T09:41:07.442Z","comments":true,"path":"2017/08/21/teeth-seg-version-1-notes/","link":"","permalink":"http://yoursite.com/2017/08/21/teeth-seg-version-1-notes/","excerpt":"","text":"In the past six months, I was working on designing and developing a Windows desktop software, for teeth segmentation and reconstruction from CBCT (kind of CT) images. The system is built with QT. I used VTK for visualization related functions and OpenCV for image processing. WorkflowThis platform is built as a QT widget application, with QVTKWidgets integrated, we could use VTK inside the QT framework. I use vtkDicomReader to read DICOM images by selecting a directory, the data is read as vtkImageData. I use vtkImageViewer2 to render slices. The vtkImageViewer2 is suitable for display 3d image by slice view, by setting view orientation and slice ID, we can have a good view of CBCT data. Below is the overall interface of the software, you can see three different view of the 3D CBCT data. Since the initial data is of 3 dimensions, I slice it into a series of 2D images for easy processing afterward. I use vtkContourWidget to let users select region of interests (ROI) on an initial slice, ROI means the rough bounding box of a tooth. Initial slice is commonly a slice with a clear boundary of each tooth. Below is a figure to select ROI of an initial slice. After picking up an ROI, segmentation procedures are started. The contour will shrink from ROI (the initial contour), iterate and iterate towards the boundary of a tooth. The last iterate contour is considered to be the segmentation results, or to say the boundary of selected tooth. Below is the segmentation result of a tooth of one slice. When the boundary of a tooth in slice N is found, I push this vtkContourWidget into a vector, convert it into a binary image and save it with ID to a specific directory. And this contour is enlarged for 1 or 2 pixels by some kind of dilate algorithm, it is used as the initial contour of next slice, next could be either upper or lower, then the segmentation procedures are looped. See the looping figure among slices below. After segmentations of all slices are done, I read all the binary images from workspace with id order to form a 3D image data, and use vtkImageMarchingCubes to reconstruct the 3D model of it. The STL model is exported with vtkSTLWriter. The reconstructed model of one tooth and all lower teeth are shown below. Segmentation AlgorithmAn enhanced level-set method is introduced as segmentation algorithm of 2D image slice. The base of this algorithm is DRLSE introduced by Prof. Chunming Li. I add a shape constraint on its energy function, which makes the contour of current slice not too far away from the previous one. When it comes to the root parts, I design a thresholding method to remove some extra parts between roots. This method is not robust yet so I am not going to explain in detail. AccelerationLevel-set method is based on iterated shrinking or expanding of initial contours so it might be extremely slow with a fixed iteration times. I calculate the area difference of current slice and previous slice, if this difference is small enough, then the iteration is stopped. I use OpenCV’s CUDA module to accelerate the calculation. The overall system has no parallel structure at all, so I can just speed up Matrix calculation with GPU. Most image processing methods do have a CUDA implementation, so I use them to rewrite the code, and speed is up to 10 times of the origin GPU version. Future ImprovementsThere are several problems remained in the current system. First, VTK is actually not that useful for my feature requirements. I will have to convert data structures between OpenCV Mat, vtkImageData and vtkContourWidget for every iteration. So I will try to remove VTK from my system or use it only in few specific conditions. Second, current GPU acceleration only supports NVIDIA GPUs, some kind of AMD support is also required. Finally, the segmentation algorithm is not robust enough to fit data from different parts, different people, and different devices. Especially for the teeth crown adjacency. I also want to do some machine learning based improvements for the algorithm, this could be possible after data collection from current software for some time. ReferenceVTK User List: This is the mailing lists for VTK users and developers, email subscribing is required.OpenCV Questions: This is a QA community of OpenCV, just like a small StackOverflow. Actually, the above two communities are of really low popularity, you may get very few responses to your posts. But some historical problems do deserve some attentions. Professor Li Chunming: His work on image segmentation is of high citations and always with very nice demo MATLAB code. @Wonju, South Korea","categories":[{"name":"Computer Vision & Image Processing","slug":"Computer-Vision-Image-Processing","permalink":"http://yoursite.com/categories/Computer-Vision-Image-Processing/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"OpenCV","slug":"OpenCV","permalink":"http://yoursite.com/tags/OpenCV/"},{"name":"VTK","slug":"VTK","permalink":"http://yoursite.com/tags/VTK/"},{"name":"QT","slug":"QT","permalink":"http://yoursite.com/tags/QT/"}],"keywords":[{"name":"Computer Vision & Image Processing","slug":"Computer-Vision-Image-Processing","permalink":"http://yoursite.com/categories/Computer-Vision-Image-Processing/"}]},{"title":"ShadowSocks Client Installation and Proxy Configuration on Ubuntu 16.04","slug":"ubuntu-ss-notes","date":"2016-09-21T02:45:50.000Z","updated":"2017-08-22T09:38:32.294Z","comments":true,"path":"2016/09/21/ubuntu-ss-notes/","link":"","permalink":"http://yoursite.com/2016/09/21/ubuntu-ss-notes/","excerpt":"","text":"I recently switched to ShadowSocks (Client) from different kinds of VPN clients, those VPNs never last long and often have unstable connection. Using ShadowSocks on Windows is pretty easy, we just have to run a GUI and do some server configuration on it, the client would automatically start system proxy. However, let ShadowSocks works properly on Ubuntu do require some works. This post assumes no prior environment installed &amp; configured except Ubuntu itself (ShadowSocks server access is required, you could buy one or set up one yourself). Step 1: Install ShadowSocks through PIPShadowSocks installed from apt-get is of low version and cannot support many password method, I recommend a installation using PIP.Install PIP:1sudo apt-get install python-pip Install ShadowSocks through PIP1pip install shadowsocks Step 2: ShadowSocks clients configurationAfter installed ShadowSocks we have to set server IP, password and many arguments for a proper connection, you may configure it using Terminal commands, but I recommend creating a configuration file.Create a ShadowSocks configuration file (json) and put it somewhere you like with content below12345678&#123;\"server\": \"for.example.xyz\",\"server_port\": 10644,\"local_port\": 1080,\"password\": \"123456\",\"timeout\": 600,\"method\": \"rc4-md5\"&#125; Now you can start your ShadowSocks client through command below1sslocal -c path/to/your/configuration/file/created/above start Step 3.1: Firefox proxy configurationShadowSocks follows socks5 proxy, so we cannot directly access http pages. Firefox is the default browser of ubuntu, so we first have to configure proxy on it.Go to “Preference-&gt;Advanced-&gt;Network-&gt;Connection-&gt;Setting”, select “Manual proxy configuration” and enter ShadowSocks default socks host 127.0.0.1 with port 1080, don’t forget to select the “SOCKS v5” checkbox. Step 3.2: Chrome proxy configurationAfter configure proper proxy on Firefox, you may want to use Chrome now. First download and install Chrome from Firefox (you may use apt-get but for these commonly-used and well-developed software I prefer to download from browser directly). Then we need a proxy management plugin, I recommend Switch Omega. However, install Chrome plugin requires connection to google which is not easy somewhere, so we first use Terminal command below to configure chrome proxy to conncect Google.1google-chrome --proxy-server=socks5://127.0.0.1:1080 Now chrome is started with proxy above. Now search for Switch Omega in Google Chrome App Center and install it. After install Switch Omega on Chrome, configure our socks5 proxy in it like below.Now next time you could start Chrome freely and use proxy to connect google. ReferenceI learned skills above from this two post, list here for you to reference: Ubuntu14.04使用Shadowsocks及转换HTTP代理 – 蔓草札记Linux Ubuntu桌面系统下使用shadowsocks 安装chrome","categories":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://yoursite.com/tags/Ubuntu/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"}]}]}